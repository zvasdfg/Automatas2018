edges={                 #usamos mapas o diccionarios
      (1,'A'):2,
      (1,'B'):2,
      (1,'C'):2,
      (1,'D'):2,
      (1,'E'):2,
      (1,'F'):2,
      (1,'G'):2,
      (1,'H'):2,
      (1,'I'):2,
      (1,'J'):2,
      (1,'K'):2,
      (1,'L'):2,
      (1,'M'):2,
      (1,'N'):2,
      (1,'O'):2,
      (1,'P'):2,
      (1,'Q'):2,
      (1,'R'):2,
      (1,'S'):2,
      (1,'T'):2,
      (1,'U'):2,
      (1,'V'):2,
      (1,'W'):2,
      (1,'X'):2,
      (1,'Y'):2,
      (1,'Z'):2,
      (1,'Ñ'):2,
      (1,'a'):2,
      (1,'b'):2,
      (1,'c'):2,
      (1,'d'):2,
      (1,'e'):2,
      (1,'f'):2,
      (1,'g'):2,
      (1,'h'):2,
      (1,'i'):2,
      (1,'j'):2,
      (1,'k'):2,
      (1,'l'):2,
      (1,'m'):2,
      (1,'n'):2,
      (1,'o'):2,
      (1,'p'):2,
      (1,'q'):2,
      (1,'r'):2,
      (1,'s'):2,
      (1,'t'):2,
      (1,'u'):2,
      (1,'b'):2,
      (1,'w'):2,
      (1,'x'):2,
      (1,'y'):2,
      (1,'z'):2,
      (1,'ñ'):2,
      (1,'0'):3,
      (1,'1'):3,
      (1,'2'):3,
      (1,'3'):3,
      (1,'4'):3,
      (1,'5'):3,
      (1,'6'):3,
      (1,'7'):3,
      (1,'8'):3,
      (1,'9'):3,
      (1,':'):6,
      (1,';'):8,
      (1,'+'):9,

##
      (2,'A'):11,
      (2,'B'):11,
      (2,'C'):11,
      (2,'D'):11,
      (2,'E'):11,
      (2,'F'):11,
      (2,'G'):11,
      (2,'H'):11,
      (2,'I'):11,
      (2,'J'):11,
      (2,'K'):11,
      (2,'L'):11,
      (2,'M'):11,
      (2,'N'):11,
      (2,'O'):11,
      (2,'P'):11,
      (2,'Q'):11,
      (2,'R'):11,
      (2,'S'):11,
      (2,'T'):11,
      (2,'U'):11,
      (2,'V'):11,
      (2,'W'):11,
      (2,'X'):11,
      (2,'Y'):11,
      (2,'Z'):11,
      (2,'Ñ'):11,
      (2,'a'):11,
      (2,'b'):11,
      (2,'c'):11,
      (2,'d'):11,
      (2,'e'):11,
      (2,'f'):11,
      (2,'g'):11,
      (2,'h'):11,
      (2,'i'):11,
      (2,'j'):11,
      (2,'k'):11,
      (2,'l'):11,
      (2,'m'):11,
      (2,'n'):11,
      (2,'o'):11,
      (2,'p'):11,
      (2,'q'):11,
      (2,'r'):11,
      (2,'s'):11,
      (2,'t'):11,
      (2,'u'):11,
      (2,'v'):11,
      (2,'w'):11,
      (2,'x'):11,
      (2,'y'):11,
      (2,'z'):11,
      (2,'ñ'):11,
      (2,'0'):11,
      (2,'1'):11,
      (2,'2'):11,
      (2,'3'):11,
      (2,'4'):11,
      (2,'5'):11,
      (2,'6'):11,
      (2,'7'):11,
      (2,'8'):11,
      (2,'9'):11,
      (2,' '):1,

      (3,'0'):3,
      (3,'1'):3,
      (3,'2'):3,
      (3,'3'):3,
      (3,'4'):3,
      (3,'5'):3,
      (3,'6'):3,
      (3,'7'):3,
      (3,'8'):3,
      (3,'9'):3,
      (3,'.'):4,
      (3,' '):1,

      (4,'0'):5,
      (4,'1'):5,
      (4,'2'):5,
      (4,'3'):5,
      (4,'4'):5,
      (4,'5'):5,
      (4,'6'):5,
      (4,'7'):5,
      (4,'8'):5,
      (4,'9'):5,
      (4,' '):1,
      
      (5,'0'):10,
      (5,'1'):10,
      (5,'2'):10,
      (5,'3'):10,
      (5,'4'):10,
      (5,'5'):10,
      (5,'6'):10,
      (5,'7'):10,
      (5,'8'):10,
      (5,'9'):10,
      (5,' '):1,

      (6,'='):7,
      (6,' '):1,
      
      (7,' '):1,
      (8,' '):1,
      (9,' '):1,
      (10,' '):1,
      (11,' '):1,

      (10,'0'):10,
      (10,'1'):10,
      (10,'2'):10,
      (10,'3'):10,
      (10,'4'):10,
      (10,'5'):10,
      (10,'6'):10,
      (10,'7'):10,
      (10,'8'):10,
      (10,'9'):10,
      
      (11,'A'):11,
      (11,'B'):11,
      (11,'C'):11,
      (11,'D'):11,
      (11,'E'):11,
      (11,'F'):11,
      (11,'G'):11,
      (11,'H'):11,
      (11,'I'):11,
      (11,'J'):11,
      (11,'K'):11,
      (11,'L'):11,
      (11,'M'):11,
      (11,'N'):11,
      (11,'O'):11,
      (11,'P'):11,
      (11,'Q'):11,
      (11,'R'):11,
      (11,'S'):11,
      (11,'T'):11,
      (11,'U'):11,
      (11,'V'):11,
      (11,'W'):11,
      (11,'X'):11,
      (11,'Y'):11,
      (11,'Z'):11,
      (11,'Ñ'):11,
      (11,'a'):11,
      (11,'b'):11,
      (11,'c'):11,
      (11,'d'):11,
      (11,'e'):11,
      (11,'f'):11,
      (11,'g'):11,
      (11,'h'):11,
      (11,'i'):11,
      (11,'j'):11,
      (11,'k'):11,
      (11,'l'):11,
      (11,'m'):11,
      (11,'n'):11,
      (11,'o'):11,
      (11,'p'):11,
      (11,'q'):11,
      (11,'r'):11,
      (11,'s'):11,
      (11,'t'):11,
      (11,'u'):11,
      (11,'v'):11,
      (11,'w'):11,
      (11,'x'):11,
      (11,'y'):11,
      (11,'z'):11,
      (11,'ñ'):11,
      (11,'0'):11,
      (11,'1'):11,
      (11,'2'):11,
      (11,'3'):11,
      (11,'4'):11,
      (11,'5'):11,
      (11,'6'):11,
      (11,'7'):11,
      (11,'8'):11,
      (11,'9'):11,

      (12,''):12,

       }

      
aceptacion=[2,3,5,7,8,9,10,11]  #estado de aceptacion
def fsmsim(string, current, edges, aceptacion,Tsuma,Tfin,Tasign,Tnreal,Tid,Tno):#creamos la funcion
    if string == "":#cuando no encuentra nada
        print("Tokens de suma: ", Tsuma)
        print("Tokens de fin de sentencia: ", Tfin)
        print("Tokens de asignacion: ", Tasign)
        print("Tokens de Numero real: ", Tnreal)
        print("Tokens de identificacion: ", Tid)
        print("Tokens no identificados: ",Tno)
        print("Tokens Aceptados",Tsuma+Tfin+Tasign+Tnreal+Tid)
        return True#retorna true

    else:
        letter= string[0] # comienza con el primer caracter
        if(current,letter)in edges:
            destination=edges[(current,letter)]#si es asi destination tendra el nuevo valor estado
        else:

              current = 0
              destination = 11
        if (current, letter) not in edges and letter != " " and current == 0:
            Tno = Tno + 1

        elif current == 9:
            Tsuma = Tsuma + 1
        elif current == 8:
            Tfin = Tfin + 1
        elif current == 7:
            Tasign = Tasign + 1
        elif current == 5 or current ==3:
            Tnreal = Tnreal + 1
        elif current == 2:
            Tid = Tid + 1
        remaining_string = string[1:]  # comenzara a recorrer los demas caracteres

    return fsmsim(remaining_string,destination,edges,aceptacion,Tsuma,Tfin,Tasign,Tnreal,Tid,Tno)#funcion recursiva


#hacemos una prueba
cadena = input() + "  "
print(fsmsim(cadena,1,edges,aceptacion,0,0,0,0,0,0))